#! /usr/bin/env python3

from rucio.client import Client
client = Client()

# ddm_quota are weight given to RSEs based on the amount of free space
# This is calulated as static use - rucio use
# The rule evaluation algorithm uses a weighted random selection of RSEs based on this value

# NOTE: This probably needs to be reviewed after an assement of age of dynamic data at different sites
# and if this can be used to normalise that


DRY_RUN = False
MAX_DDM_QUOTA = 1000
FREE_SPACE_COEFFICIENT = 2

# Adding ddm_quota attribute to all disk RSEs
# T3s do not have the "static" usage set, they are quasi-static
RSE_EXPRESSION = "rse_type=DISK&cms_type=real&tier<3&tier>0"
rses = [rse["rse"] for rse in client.list_rses(rse_expression=RSE_EXPRESSION)]
ddm_quotas = {}
overridden_ddm_quotas = {}

def calculate_ddm_quotas():
    for rse in rses:
        rse_usage = list(client.get_rse_usage(rse))

        required_fields = {"static", "rucio", "unavailable", "expired"}
        relevant_info = {}

        for source in rse_usage:
            # Assuming source and used keys exist
            relevant_info[source["source"]] = source["used"]


        if not required_fields.issubset(relevant_info.keys()):
            print("Skipping {} due to lack of relevant key in rse".format(rse))
            print("{} is not a subset of {}".format(required_fields, relevant_info.keys()))
            continue

        # ddm_quota is set proportional to percentage of (dynamic + free) space
        # Apparently, python integers do not overflow, https://docs.python.org/3/library/exceptions.html#OverflowError

        static, rucio, unavailable, expired = relevant_info["static"], relevant_info["rucio"] ,relevant_info["unavailable"], relevant_info["expired"]

        # Normalise
        if static == 0:
            continue  # Skip if static is 0

        free = static - rucio
        ddm_quota = (((FREE_SPACE_COEFFICIENT * free + expired) / static) * 10) ** 2

        # Override ddm_quota for operational purposes
        rse_attributes = client.list_rse_attributes(rse)
        if "override_ddm_quota" in rse_attributes:
            overridden_ddm_quotas[rse] = rse_attributes["override_ddm_quota"]
            continue

        ddm_quotas[rse] = ddm_quota


def normalize_ddm_quotas():
    weights = [int(value) for value in ddm_quotas.values()]
    for rse, weight in ddm_quotas.items():
        ddm_quotas[rse] = int(((weight - min(weights)) / (max(weights) - min(weights))) * MAX_DDM_QUOTA)


def set_ddm_quotas():
    # Set automatically calculated ddm quotas
    for rse, ddm_quota in ddm_quotas.items():
        if DRY_RUN:
            print("DRY-RUN: Set ddm_quota for {} to {}".format(rse, ddm_quota))
        else:
            client.add_rse_attribute(rse, "ddm_quota", ddm_quota)
            print("Set ddm_quota for {} to {}".format(rse, ddm_quota))

    # Set overriden ddm_quotas
    for rse, ddm_quota in overridden_ddm_quotas.items():
        if DRY_RUN:
            print("DRY-RUN: Override ddm_quota for {} to {}".format(rse, ddm_quota))
        else:
            client.add_rse_attribute(rse, "ddm_quota", ddm_quota)
            print("Override ddm_quota for {} to {}".format(rse, ddm_quota))

def main():

    calculate_ddm_quotas()
    normalize_ddm_quotas()
    set_ddm_quotas()

if __name__ == "__main__":
    main()

